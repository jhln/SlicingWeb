original mini encoding:
input n
i := 0;         -- 0
r := 0;         -- 0
while(i<=n)do{  -- 1
  r:=(r+i);     -- 2
  i:=(i+1)}     -- 3

e.g. assert: r<100


propsotion logic encoding:
pc=0 => i'=0, r'=0, n'=n, pc'=1
pc=1, i≤n => r'=r, i'=i, n'=n, pc'=2
pc=1, i>n => r′=r, n'=n, pc'=4
pc=2 => r'=r+1, i'=i, n'=n, pc'=3
pc=3 => r'=r, i'=i+1, n'=n, pc'=1
pc=4 => pc'=5 
pc=5 => pc'=5


smt-lib encoding:
(program
  (state (pc Int) (n Int) (i Int) (r Int))
  (init (= pc 0))
  (transition
          (=> (= pc 0)
              (and (= r_ 0) (= i_ 0) (= n_ n) (= pc_ 1)))
          (=> (and (= pc 1) (<= i n))
              (and (= r_ r) (= i_ i) (= n_ n) (= pc_ 2)))
          (=> (and (= pc 1) (> i n))
              (and (= r_ r) (= n_ n) (= pc_ 4)))
          (=> (= pc 2)
              (and (= r_ (+ r i)) (= i_ i) (= n_ n) (= pc_ 3)))
          (=> (= pc 3)
              (and (= r_ r) (= i_ (+ i 1)) (= n_ n) (= pc_ 1)))
          (=> (= pc 4)
              (= pc_ 5))
          (=> (= pc 5)
              (= pc_ 5)))
  (property (=> (= pc 4)
                (= r 0))))



https://hackage.haskell.org/package/sbv
sbv encoding of sum of all numbers from 1 till n:
s = 0
i = 0
while i <= n:
    s += i
    i++


https://hackage.haskell.org/package/sbv-8.15/docs/Documentation-SBV-Examples-ProofTools-Sum.html
sumCorrect :: IO (InductionResult (S Integer))
sumCorrect = induct chatty setup initial trans strengthenings inv goal
  where -- Set this to True for SBV to print steps as it proceeds
        -- through the inductive proof
        chatty :: Bool
        chatty = False

        -- This is where we would put solver options, typically via
        -- calls to 'Data.SBV.setOption'. We do not need any for this problem,
        -- so we simply do nothing.
        setup :: Symbolic ()
        setup = return ()

        -- Initially, @s@ and @i@ are both @0@. We also require @n@ to be at least @0@.
        initial :: S SInteger -> SBool
        initial S{s, i, n} = s .== 0 .&& i .== 0 .&& n .>= 0

        -- We code the algorithm almost literally in SBV notation:
        trans :: S SInteger -> [S SInteger]
        trans st@S{s, i, n} = [ite (i .<= n)
                                   st { s = s+i, i = i+1 }
                                   st
                              ]

        -- No strengthenings needed for this problem!
        strengthenings :: [(String, S SInteger -> SBool)]
        strengthenings = []

        -- Loop invariant: @i@ remains at most @n+1@ and @s@ the sum of
        -- all the numbers up-to @i-1@.
        inv :: S SInteger -> SBool
        inv S{s, i, n} =    i .<= n+1
                        .&& s .== (i * (i - 1)) `sDiv` 2

        -- Final goal. When the termination condition holds, the sum is
        -- equal to all the numbers up to and including @n@. Note that
        -- SBV does not prove the termination condition; it simply is
        -- the indication that the loop has ended as specified by the user.
        goal :: S SInteger -> (SBool, SBool)
        goal S{s, i, n} = (i .== n+1, s .== (n * (n+1)) `sDiv` 2)